// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:tch
package messages

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD Element validations

func (v Message) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Message"
	rtp.AddError(&errs, baseName+".AppHdr", v.AppHdr.Validate())
	if v.CreditTransfer != nil {
		rtp.AddError(&errs, baseName+".CreditTransfer", v.CreditTransfer.Validate())
	}
	if v.MessageStatusReport != nil {
		rtp.AddError(&errs, baseName+".MessageStatusReport", v.MessageStatusReport.Validate())
	}
	if v.FICreditTransfer != nil {
		rtp.AddError(&errs, baseName+".FICreditTransfer", v.FICreditTransfer.Validate())
	}
	if v.Acknowledgement != nil {
		rtp.AddError(&errs, baseName+".Acknowledgement", v.Acknowledgement.Validate())
	}
	if v.ResponseRequestForInformation != nil {
		rtp.AddError(&errs, baseName+".ResponseRequestForInformation", v.ResponseRequestForInformation.Validate())
	}
	if v.RequestForInformation != nil {
		rtp.AddError(&errs, baseName+".RequestForInformation", v.RequestForInformation.Validate())
	}
	if v.ReturnOfFunds != nil {
		rtp.AddError(&errs, baseName+".ReturnOfFunds", v.ReturnOfFunds.Validate())
	}
	if v.PaymentRequest != nil {
		rtp.AddError(&errs, baseName+".PaymentRequest", v.PaymentRequest.Validate())
	}
	if v.ResponsePaymentRequest != nil {
		rtp.AddError(&errs, baseName+".ResponsePaymentRequest", v.ResponsePaymentRequest.Validate())
	}
	if v.ResponseReturnOfFunds != nil {
		rtp.AddError(&errs, baseName+".ResponseReturnOfFunds", v.ResponseReturnOfFunds.Validate())
	}
	if v.EchoRequest != nil {
		rtp.AddError(&errs, baseName+".EchoRequest", v.EchoRequest.Validate())
	}
	if v.EchoResponse != nil {
		rtp.AddError(&errs, baseName+".EchoResponse", v.EchoResponse.Validate())
	}
	if v.SignOffRequest != nil {
		rtp.AddError(&errs, baseName+".SignOffRequest", v.SignOffRequest.Validate())
	}
	if v.SignOffResponse != nil {
		rtp.AddError(&errs, baseName+".SignOffResponse", v.SignOffResponse.Validate())
	}
	if v.SignOnRequest != nil {
		rtp.AddError(&errs, baseName+".SignOnRequest", v.SignOnRequest.Validate())
	}
	if v.SignOnResponse != nil {
		rtp.AddError(&errs, baseName+".SignOnResponse", v.SignOnResponse.Validate())
	}
	if v.StandaloneRemittance != nil {
		rtp.AddError(&errs, baseName+".StandaloneRemittance", v.StandaloneRemittance.Validate())
	}
	if v.SystemNotificationEvent != nil {
		rtp.AddError(&errs, baseName+".SystemNotificationEvent", v.SystemNotificationEvent.Validate())
	}
	if v.MessageReject != nil {
		rtp.AddError(&errs, baseName+".MessageReject", v.MessageReject.Validate())
	}
	if v.TokenIdentification != nil {
		rtp.AddError(&errs, baseName+".TokenIdentification", v.TokenIdentification.Validate())
	}
	if v.ParticipantReport != nil {
		rtp.AddError(&errs, baseName+".ParticipantReport", v.ParticipantReport.Validate())
	}
	if v.ParticipantReportResponse != nil {
		rtp.AddError(&errs, baseName+".ParticipantReportResponse", v.ParticipantReportResponse.Validate())
	}
	if v.PaymentStatusRequest != nil {
		rtp.AddError(&errs, baseName+".PaymentStatusRequest", v.PaymentStatusRequest.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD ComplexType validations
