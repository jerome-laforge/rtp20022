// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.035.001.05
package camt_035_001_05

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6TCH"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Case5"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	rtp.AddError(&errs, baseName+".Cretr", v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Case5TCH"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	rtp.AddError(&errs, baseName+".Cretr", v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CaseAssignment5"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	rtp.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	rtp.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	rtp.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CaseAssignment5TCH"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	rtp.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	rtp.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	rtp.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2TCH"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentTCH"
	rtp.AddError(&errs, baseName+".PrtryFrmtInvstgtn", v.PrtryFrmtInvstgtn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18TCH"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40Choice"
	if v.Pty != nil {
		rtp.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40ChoiceTCH"
	if v.Agt != nil {
		rtp.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40ChoiceTCH2"
	if v.Pty != nil {
		rtp.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification135"
	rtp.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification135TCH"
	rtp.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryData6Reduced) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryData6Reduced"
	if v.Ustrd != nil {
		rtp.AddError(&errs, baseName+".Ustrd", v.Ustrd.Validate())
	}
	rtp.AddError(&errs, baseName+".OrigRefs", v.OrigRefs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryData6ReducedTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryData6ReducedTCH"
	if v.Ustrd != nil {
		rtp.AddError(&errs, baseName+".Ustrd", v.Ustrd.Validate())
	}
	rtp.AddError(&errs, baseName+".OrigRefs", v.OrigRefs.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryData7TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryData7TCH"
	rtp.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	rtp.AddError(&errs, baseName+".Data", v.Data.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryData7TCHTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryData7TCHTCH"
	rtp.AddError(&errs, baseName+".Tp", v.Tp.Validate())
	rtp.AddError(&errs, baseName+".Data", v.Data.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryFormatInvestigationV05) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryFormatInvestigationV05"
	rtp.AddError(&errs, baseName+".Assgnmt", v.Assgnmt.Validate())
	rtp.AddError(&errs, baseName+".Case", v.Case.Validate())
	rtp.AddError(&errs, baseName+".PrtryData", v.PrtryData.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ProprietaryFormatInvestigationV05TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ProprietaryFormatInvestigationV05TCH"
	rtp.AddError(&errs, baseName+".Assgnmt", v.Assgnmt.Validate())
	rtp.AddError(&errs, baseName+".Case", v.Case.Validate())
	rtp.AddError(&errs, baseName+".PrtryData", v.PrtryData.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionReferences8Reduced) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionReferences8Reduced"
	rtp.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	rtp.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	rtp.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	if v.UETR != nil {
		rtp.AddError(&errs, baseName+".UETR", v.UETR.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v TransactionReferences8ReducedTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "TransactionReferences8ReducedTCH"
	rtp.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	rtp.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	rtp.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	if v.UETR != nil {
		rtp.AddError(&errs, baseName+".UETR", v.UETR.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v Max140Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH) Validate() error {
	if err := rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH2) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 9); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 9); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH3) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "ACK", "ACWP"); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
