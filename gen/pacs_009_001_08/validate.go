// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:pacs.009.001.08
package pacs_009_001_08

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v AccountIdentification4Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "AccountIdentification4Choice"
	if v.Othr != nil {
		rtp.AddError(&errs, baseName+".Othr", v.Othr.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ActiveCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveCurrencyAndAmount"

	rtp.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6TCH"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CashAccount38) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CashAccount38"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemIdentification3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemIdentification3Choice"
	if v.Cd != nil {
		rtp.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2TCH"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransaction36) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditTransferTransaction36"
	rtp.AddError(&errs, baseName+".PmtId", v.PmtId.Validate())
	rtp.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	rtp.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	rtp.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	rtp.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	if v.DbtrAcct != nil {
		rtp.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	}
	rtp.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	rtp.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	if v.RmtInf != nil {
		rtp.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CreditTransferTransaction36TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CreditTransferTransaction36TCH"
	rtp.AddError(&errs, baseName+".PmtId", v.PmtId.Validate())
	rtp.AddError(&errs, baseName+".PmtTpInf", v.PmtTpInf.Validate())
	rtp.AddError(&errs, baseName+".IntrBkSttlmAmt", v.IntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	rtp.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	rtp.AddError(&errs, baseName+".Dbtr", v.Dbtr.Validate())
	if v.DbtrAcct != nil {
		rtp.AddError(&errs, baseName+".DbtrAcct", v.DbtrAcct.Validate())
	}
	rtp.AddError(&errs, baseName+".Cdtr", v.Cdtr.Validate())
	rtp.AddError(&errs, baseName+".CdtrAcct", v.CdtrAcct.Validate())
	if v.RmtInf != nil {
		rtp.AddError(&errs, baseName+".RmtInf", v.RmtInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentTCH"
	rtp.AddError(&errs, baseName+".FICdtTrf", v.FICdtTrf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionCreditTransferV08) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionCreditTransferV08"
	rtp.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	rtp.AddError(&errs, baseName+".CdtTrfTxInf", v.CdtTrfTxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionCreditTransferV08TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionCreditTransferV08TCH"
	rtp.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	rtp.AddError(&errs, baseName+".CdtTrfTxInf", v.CdtTrfTxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18TCH"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GenericAccountIdentification1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GenericAccountIdentification1"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader93) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader93"
	rtp.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	rtp.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	rtp.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	rtp.AddError(&errs, baseName+".TtlIntrBkSttlmAmt", v.TtlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	rtp.AddError(&errs, baseName+".SttlmInf", v.SttlmInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GroupHeader93TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GroupHeader93TCH"
	rtp.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	rtp.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	rtp.AddError(&errs, baseName+".NbOfTxs", v.NbOfTxs.Validate())
	rtp.AddError(&errs, baseName+".TtlIntrBkSttlmAmt", v.TtlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, baseName+".IntrBkSttlmDt", v.IntrBkSttlmDt.Validate())
	rtp.AddError(&errs, baseName+".SttlmInf", v.SttlmInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentIdentification7"
	rtp.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	rtp.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	rtp.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	if v.ClrSysRef != nil {
		rtp.AddError(&errs, baseName+".ClrSysRef", v.ClrSysRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentIdentification7TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentIdentification7TCH"
	rtp.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	rtp.AddError(&errs, baseName+".EndToEndId", v.EndToEndId.Validate())
	rtp.AddError(&errs, baseName+".TxId", v.TxId.Validate())
	if v.ClrSysRef != nil {
		rtp.AddError(&errs, baseName+".ClrSysRef", v.ClrSysRef.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation28) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation28"
	rtp.AddError(&errs, baseName+".SvcLvl", v.SvcLvl.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PaymentTypeInformation28TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PaymentTypeInformation28TCH"
	rtp.AddError(&errs, baseName+".SvcLvl", v.SvcLvl.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation2"
	if v.Ustrd != nil {
		rtp.AddError(&errs, baseName+".Ustrd", v.Ustrd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v RemittanceInformation2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "RemittanceInformation2TCH"
	if v.Ustrd != nil {
		rtp.AddError(&errs, baseName+".Ustrd", v.Ustrd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ServiceLevel8Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ServiceLevel8Choice"
	if v.Cd != nil {
		rtp.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInstruction7) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementInstruction7"
	rtp.AddError(&errs, baseName+".SttlmMtd", v.SttlmMtd.Validate())
	rtp.AddError(&errs, baseName+".ClrSys", v.ClrSys.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v SettlementInstruction7TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "SettlementInstruction7TCH"
	rtp.AddError(&errs, baseName+".SttlmMtd", v.SttlmMtd.Validate())
	rtp.AddError(&errs, baseName+".ClrSys", v.ClrSys.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveCurrencyCode) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	if err := rtp.ValidateEnumeration(string(v), "USD"); err != nil {
		return err
	}
	return nil
}

func (v ExternalCashClearingSystem1Code) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "TCH"); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 3); err != nil {
		return err
	}
	return nil
}

func (v ExternalServiceLevel1Code) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "SDVA"); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 4); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max1NumericText) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[1]{1,1}`); err != nil {
		return err
	}
	return nil
}

func (v Max34Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 34); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH) Validate() error {
	if err := rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH2) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH3) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 9); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 9); err != nil {
		return err
	}
	return nil
}

func (v SettlementMethod1Code) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "CLRG"); err != nil {
		return err
	}
	return nil
}
