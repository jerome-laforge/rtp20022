// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:head.001.001.01
package head_001_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification5BAH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification5BAH"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if v.BrnchId != nil {
		rtp.AddError(&errs, baseName+".BrnchId", v.BrnchId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification5BAHTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification5BAHTCH"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if v.BrnchId != nil {
		rtp.AddError(&errs, baseName+".BrnchId", v.BrnchId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchData2BAH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchData2BAH"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchData2BAHTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchData2BAHTCH"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BusinessApplicationHeaderV01) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BusinessApplicationHeaderV01"
	rtp.AddError(&errs, baseName+".Fr", v.Fr.Validate())
	rtp.AddError(&errs, baseName+".To", v.To.Validate())
	rtp.AddError(&errs, baseName+".BizMsgIdr", v.BizMsgIdr.Validate())
	rtp.AddError(&errs, baseName+".MsgDefIdr", v.MsgDefIdr.Validate())
	if v.BizSvc != nil {
		rtp.AddError(&errs, baseName+".BizSvc", v.BizSvc.Validate())
	}
	rtp.AddError(&errs, baseName+".CreDt", v.CreDt.Validate())
	if v.CpyDplct != nil {
		rtp.AddError(&errs, baseName+".CpyDplct", v.CpyDplct.Validate())
	}
	if v.Sgntr != nil {
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BusinessApplicationHeaderV01TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BusinessApplicationHeaderV01TCH"
	rtp.AddError(&errs, baseName+".Fr", v.Fr.Validate())
	rtp.AddError(&errs, baseName+".To", v.To.Validate())
	rtp.AddError(&errs, baseName+".BizMsgIdr", v.BizMsgIdr.Validate())
	rtp.AddError(&errs, baseName+".MsgDefIdr", v.MsgDefIdr.Validate())
	if v.BizSvc != nil {
		rtp.AddError(&errs, baseName+".BizSvc", v.BizSvc.Validate())
	}
	rtp.AddError(&errs, baseName+".CreDt", v.CreDt.Validate())
	if v.CpyDplct != nil {
		rtp.AddError(&errs, baseName+".CpyDplct", v.CpyDplct.Validate())
	}
	if v.Sgntr != nil {
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2ADMN"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification8BAH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification8BAH"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party9ChoiceBAH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party9ChoiceBAH"
	if v.FIId != nil {
		rtp.AddError(&errs, baseName+".FIId", v.FIId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party9ChoiceBAHTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party9ChoiceBAHTCH"
	if v.FIId != nil {
		rtp.AddError(&errs, baseName+".FIId", v.FIId.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v CopyDuplicate1Code) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "COPY", "DUPL"); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH) Validate() error {
	if err := rtp.ValidatePattern(string(v), `B[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Min11Max11Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 11); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 11); err != nil {
		return err
	}
	return nil
}

func (v OrigMsgName) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "acmt.022.001.02", "admi.002.001.01", "admi.004.001.02", "admn.001.001.01", "admn.002.001.01", "admn.003.001.01", "admn.004.001.01", "admn.005.001.01", "admn.006.001.01", "admn.007.001.01", "admn.008.001.01", "camt.026.001.07", "camt.028.001.09", "camt.029.001.09", "camt.035.001.05", "camt.056.001.08", "pacs.002.001.10", "pacs.008.001.08", "pacs.009.001.08", "pacs.028.001.03", "pain.013.001.07", "pain.014.001.07", "remt.001.001.04"); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}
