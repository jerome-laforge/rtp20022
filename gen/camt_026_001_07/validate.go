// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:camt.026.001.07
package camt_026_001_07

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v ActiveOrHistoricCurrencyAndAmount) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ActiveOrHistoricCurrencyAndAmount"

	rtp.AddError(&errs, baseName+".Ccy", v.Ccy.Validate())

	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6TCH"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v BranchAndFinancialInstitutionIdentification6TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification6TCH2"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Case5"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	rtp.AddError(&errs, baseName+".Cretr", v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Case5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Case5TCH"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	rtp.AddError(&errs, baseName+".Cretr", v.Cretr.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CaseAssignment5"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	rtp.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	rtp.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	rtp.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v CaseAssignment5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "CaseAssignment5TCH"
	rtp.AddError(&errs, baseName+".Id", v.Id.Validate())
	rtp.AddError(&errs, baseName+".Assgnr", v.Assgnr.Validate())
	rtp.AddError(&errs, baseName+".Assgne", v.Assgne.Validate())
	rtp.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2TCH"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2TCH2"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DateAndDateTime2Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DateAndDateTime2Choice"
	if v.Dt != nil {
		rtp.AddError(&errs, baseName+".Dt", v.Dt.Validate())
	}
	if v.DtTm != nil {
		rtp.AddError(&errs, baseName+".DtTm", v.DtTm.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentTCH"
	rtp.AddError(&errs, baseName+".UblToApply", v.UblToApply.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18TCH"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification18TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification18TCH2"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v MissingOrIncorrectInformation3) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "MissingOrIncorrectInformation3"
	if v.MssngInf != nil {
		for indx := range v.MssngInf {
			rtp.AddError(&errs, baseName+".MssngInf", v.MssngInf[indx].Validate())
		}
	}
	if v.IncrrctInf != nil {
		for indx := range v.IncrrctInf {
			rtp.AddError(&errs, baseName+".IncrrctInf", v.IncrrctInf[indx].Validate())
		}
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40Choice"
	if v.Pty != nil {
		rtp.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40ChoiceTCH"
	if v.Agt != nil {
		rtp.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v Party40ChoiceTCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "Party40ChoiceTCH2"
	if v.Pty != nil {
		rtp.AddError(&errs, baseName+".Pty", v.Pty.Validate())
	}
	if v.Agt != nil {
		rtp.AddError(&errs, baseName+".Agt", v.Agt.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification135"
	rtp.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v PartyIdentification135TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "PartyIdentification135TCH"
	rtp.AddError(&errs, baseName+".Nm", v.Nm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyIncorrect1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnableToApplyIncorrect1"
	rtp.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	if v.AddtlIncrrctInf != nil {
		rtp.AddError(&errs, baseName+".AddtlIncrrctInf", v.AddtlIncrrctInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyJustification3Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnableToApplyJustification3Choice"
	if v.MssngOrIncrrctInf != nil {
		rtp.AddError(&errs, baseName+".MssngOrIncrrctInf", v.MssngOrIncrrctInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyMissing1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnableToApplyMissing1"
	rtp.AddError(&errs, baseName+".Cd", v.Cd.Validate())
	if v.AddtlMssngInf != nil {
		rtp.AddError(&errs, baseName+".AddtlMssngInf", v.AddtlMssngInf.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyV07) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnableToApplyV07"
	rtp.AddError(&errs, baseName+".Assgnmt", v.Assgnmt.Validate())
	rtp.AddError(&errs, baseName+".Case", v.Case.Validate())
	rtp.AddError(&errs, baseName+".Undrlyg", v.Undrlyg.Validate())
	rtp.AddError(&errs, baseName+".Justfn", v.Justfn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnableToApplyV07TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnableToApplyV07TCH"
	rtp.AddError(&errs, baseName+".Assgnmt", v.Assgnmt.Validate())
	rtp.AddError(&errs, baseName+".Case", v.Case.Validate())
	rtp.AddError(&errs, baseName+".Undrlyg", v.Undrlyg.Validate())
	rtp.AddError(&errs, baseName+".Justfn", v.Justfn.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingGroupInformation1) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingGroupInformation1"
	rtp.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingGroupInformation1TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingGroupInformation1TCH"
	rtp.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingGroupInformation1TCH2) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingGroupInformation1TCH2"
	rtp.AddError(&errs, baseName+".OrgnlMsgId", v.OrgnlMsgId.Validate())
	rtp.AddError(&errs, baseName+".OrgnlMsgNmId", v.OrgnlMsgNmId.Validate())
	rtp.AddError(&errs, baseName+".OrgnlCreDtTm", v.OrgnlCreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentInstruction5) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingPaymentInstruction5"
	rtp.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, baseName+".OrgnlPmtInfId", v.OrgnlPmtInfId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, baseName+".OrgnlInstdAmt", v.OrgnlInstdAmt.Validate())
	rtp.AddError(&errs, baseName+".ReqdExctnDt", v.ReqdExctnDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentInstruction5TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingPaymentInstruction5TCH"
	rtp.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, baseName+".OrgnlPmtInfId", v.OrgnlPmtInfId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, baseName+".OrgnlInstdAmt", v.OrgnlInstdAmt.Validate())
	rtp.AddError(&errs, baseName+".ReqdExctnDt", v.ReqdExctnDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentTransaction4) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingPaymentTransaction4"
	rtp.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	rtp.AddError(&errs, baseName+".OrgnlTxId", v.OrgnlTxId.Validate())
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, baseName+".OrgnlIntrBkSttlmAmt", v.OrgnlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, baseName+".OrgnlIntrBkSttlmDt", v.OrgnlIntrBkSttlmDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingPaymentTransaction4TCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingPaymentTransaction4TCH"
	rtp.AddError(&errs, baseName+".OrgnlGrpInf", v.OrgnlGrpInf.Validate())
	rtp.AddError(&errs, baseName+".OrgnlInstrId", v.OrgnlInstrId.Validate())
	if v.OrgnlEndToEndId != nil {
		rtp.AddError(&errs, baseName+".OrgnlEndToEndId", v.OrgnlEndToEndId.Validate())
	}
	rtp.AddError(&errs, baseName+".OrgnlTxId", v.OrgnlTxId.Validate())
	if v.OrgnlUETR != nil {
		rtp.AddError(&errs, baseName+".OrgnlUETR", v.OrgnlUETR.Validate())
	}
	rtp.AddError(&errs, baseName+".OrgnlIntrBkSttlmAmt", v.OrgnlIntrBkSttlmAmt.Validate())
	rtp.AddError(&errs, baseName+".OrgnlIntrBkSttlmDt", v.OrgnlIntrBkSttlmDt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction5Choice) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingTransaction5Choice"
	if v.Initn != nil {
		rtp.AddError(&errs, baseName+".Initn", v.Initn.Validate())
	}
	if v.IntrBk != nil {
		rtp.AddError(&errs, baseName+".IntrBk", v.IntrBk.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v UnderlyingTransaction5ChoiceTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "UnderlyingTransaction5ChoiceTCH"
	if v.Initn != nil {
		rtp.AddError(&errs, baseName+".Initn", v.Initn.Validate())
	}
	if v.IntrBk != nil {
		rtp.AddError(&errs, baseName+".IntrBk", v.IntrBk.Validate())
	}
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v ActiveOrHistoricCurrencyCode) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[A-Z]{3,3}`); err != nil {
		return err
	}
	if err := rtp.ValidateEnumeration(string(v), "USD"); err != nil {
		return err
	}
	return nil
}

func (v Max140Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 140); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH) Validate() error {
	if err := rtp.ValidatePattern(string(v), `M[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH2) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 9); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 9); err != nil {
		return err
	}
	return nil
}

func (v OrigMsgName) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "pacs.008.001.06", "pacs.008.001.08", "pain.013.001.07"); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v OrigMsgNameTCH) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "pain.013.001.07"); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v OrigMsgNameTCH2) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "pacs.008.001.06", "pacs.008.001.08"); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v UnableToApplyIncorrectInformation4Code) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "IN01", "IN04", "IN06", "IN15", "IN19", "IN38", "IN39", "MM20", "MM21", "NARR"); err != nil {
		return err
	}
	return nil
}

func (v UnableToApplyMissingInformation3Code) Validate() error {
	if err := rtp.ValidateEnumeration(string(v), "MS01", "NARR"); err != nil {
		return err
	}
	return nil
}

func (v UUIDv4Identifier) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}`); err != nil {
		return err
	}
	return nil
}
