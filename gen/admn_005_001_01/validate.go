// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Validations for urn:iso:std:iso:20022:tech:xsd:admn.005.001.01
package admn_005_001_01

import (
	"github.com/moov-io/base"
	"github.com/moov-io/rtp20022/pkg/rtp"
)

// XSD ComplexType validations

func (v BranchAndFinancialInstitutionIdentification4ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "BranchAndFinancialInstitutionIdentification4ADMN"
	rtp.AddError(&errs, baseName+".FinInstnId", v.FinInstnId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v ClearingSystemMemberIdentification2ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "ClearingSystemMemberIdentification2ADMN"
	rtp.AddError(&errs, baseName+".MmbId", v.MmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v DocumentTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "DocumentTCH"
	rtp.AddError(&errs, baseName+".AdmnEchoReq", v.AdmnEchoReq.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EchoRequest) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EchoRequest"
	rtp.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	rtp.AddError(&errs, baseName+".EchoTxInf", v.EchoTxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EchoRequestTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EchoRequestTCH"
	rtp.AddError(&errs, baseName+".GrpHdr", v.GrpHdr.Validate())
	rtp.AddError(&errs, baseName+".EchoTxInf", v.EchoTxInf.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EchoTxInf) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EchoTxInf"
	rtp.AddError(&errs, baseName+".FnctnCd", v.FnctnCd.Validate())
	rtp.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	rtp.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	rtp.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v EchoTxInfTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "EchoTxInfTCH"
	rtp.AddError(&errs, baseName+".FnctnCd", v.FnctnCd.Validate())
	rtp.AddError(&errs, baseName+".InstrId", v.InstrId.Validate())
	rtp.AddError(&errs, baseName+".InstgAgt", v.InstgAgt.Validate())
	rtp.AddError(&errs, baseName+".InstdAgt", v.InstdAgt.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v FinancialInstitutionIdentification7ADMN) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "FinancialInstitutionIdentification7ADMN"
	rtp.AddError(&errs, baseName+".ClrSysMmbId", v.ClrSysMmbId.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdr) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GrpHdr"
	rtp.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	rtp.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

func (v GrpHdrTCH) Validate() error {
	var errs base.ErrorList = base.ErrorList{}
	baseName := "GrpHdrTCH"
	rtp.AddError(&errs, baseName+".MsgId", v.MsgId.Validate())
	rtp.AddError(&errs, baseName+".CreDtTm", v.CreDtTm.Validate())
	if errs.Empty() {
		return nil
	}
	return errs
}

// XSD SimpleType validations

func (v EchoCode) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[0-9]{1,3}`); err != nil {
		return err
	}
	if err := rtp.ValidateEnumeration(string(v), "731"); err != nil {
		return err
	}
	return nil
}

func (v Max35Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])){2})[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Max35TextTCH2) Validate() error {
	if err := rtp.ValidatePattern(string(v), `[0-9]{4}(((01|03|05|07|08|10|12)((0[1-9])|([1-2][0-9])|(3[0-1])))|((04|06|09|11)((0[1-9])|([1-2][0-9])|30))|((02)((0[1-9])|([1-2][0-9]))))[A-Z0-9]{11}.*`); err != nil {
		return err
	}
	if err := rtp.ValidateMinLength(string(v), 1); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 35); err != nil {
		return err
	}
	return nil
}

func (v Min11Max11Text) Validate() error {
	if err := rtp.ValidateMinLength(string(v), 11); err != nil {
		return err
	}
	if err := rtp.ValidateMaxLength(string(v), 11); err != nil {
		return err
	}
	return nil
}
